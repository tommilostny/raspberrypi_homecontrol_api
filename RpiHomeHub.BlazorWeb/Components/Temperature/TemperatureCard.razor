@using Newtonsoft.Json
@using RpiHomeHub.BlazorWeb.Models  
@inject HttpClient httpClient

<style>
    ﻿.card {
        padding: 20px;
        margin: 5px;
        box-shadow: 0 0 15px lightgrey;
        border-radius: 10px
    }
</style>

<div class="card">
    @if (Temperature is not null)
    {
        <h3>Room temperature</h3>
        <div class="row inside">
            <div class="col">
                <h4><b>@Temperature.Celsius°C</b></h4>
            </div>
            <div class="col">
                <h4>@Temperature.Fahrenheit°F</h4>
            </div>
            <div class="col">
                <h4>@Temperature.Kelvin°K</h4>
            </div>
        </div>

        <button class="btn btn-secondary" @onclick="GetTemperature">Refresh</button>

        @if (ShowThresholdSetting)
        {
            <hr>
            <label for="thresholdday_text">Temperature threshold (day):</label>
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <input type="number" id="thresholdday_text" @bind-value="@Temperature.ThresholdDay" />
                        <span class="input-group-text">°C</span>
                    </div>
                </div>
                <div class="col-3">
                    <button class="btn btn-warning" @onclick="() => SetTempThreshold(dayString)">Set</button>
                </div>
            </div>

            <label for="thresholdnight_text">Temperature threshold (night):</label>
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <input type="number" id="thresholdnighz_text" @bind-value="@Temperature.ThresholdNight" />
                        <span class="input-group-text">°C</span>
                    </div>
                </div>
                <div class="col-3">
                    <button class="btn btn-warning" @onclick="() => SetTempThreshold(nightString)">Set</button>
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading room temperature...</p>
    }
</div>

@code
{
    const string nightString = "night";
    const string dayString = "day";

    private TemperatureModel Temperature { get; set; }

    [Parameter]
    public bool ShowThresholdSetting { get; set; } = true;

    private async Task GetTemperature()
    {
        var response = await httpClient.GetAsync("temperature");
        var content = await response.Content.ReadAsStringAsync();
        Temperature = JsonConvert.DeserializeObject<TemperatureModel>(content);
    }

    private async Task SetTempThreshold(string period)
    {
        float newThreshold = period switch
        {
            "day" => Temperature.ThresholdDay,
            _ => Temperature.ThresholdNight
        };
        await httpClient.GetAsync($"temp_threshold/{period}/{string.Format("{0:N3}", newThreshold)}");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTemperature();
        await base.OnInitializedAsync();
    }
}
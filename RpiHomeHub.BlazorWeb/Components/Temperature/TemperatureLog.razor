@using System.Net
@using Newtonsoft.Json
@inject HttpClient httpClient

<div class="row">
    <div class="col">
        <label for="ta1" class="form-label">Temperature events log: (@GetLinesCount() events)</label>
    </div>
    <div class="col-3">
        <button class="btn btn-secondary" @onclick="FetchLog">Refresh</button>
        <button class="btn btn-danger" @onclick="ClearLog">Clear</button>
    </div>
</div>
<textarea class="form-control" id="ta1" rows="16" disabled="true" style="font-family: 'Courier New', Courier, monospace;">
    @if (LogLines is not null)
    {
        @foreach (var line in LogLines)
        {
            @line
        }
    }
</textarea>

@code 
{
    private List<string> LogLines { get; set; }

    private async Task FetchLog()
    {
        var response = await httpClient.GetAsync("temp_log");
        var content = await response.Content.ReadAsStringAsync();
        LogLines = JsonConvert.DeserializeObject<List<string>>(content);
        LogLines.Reverse();
    }

    private async Task ClearLog()
    {
        var response = await httpClient.DeleteAsync("temp_log");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            LogLines = new List<string>();
        }
        //else ErrorDialog?
    }

    private int GetLinesCount() => LogLines is not null ? LogLines.Count : 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchLog();
        await base.OnInitializedAsync();
    }
}

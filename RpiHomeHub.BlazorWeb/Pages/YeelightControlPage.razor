@page "/yeelight"
@using RpiHomeHub.BlazorWeb.Components
@using RpiHomeHub.BlazorWeb.Models
@using RpiHomeHub.BlazorWeb.Services
@using System.Net
@inject HttpClient httpClient
@inject YeelightBulbService yeelightService

<style>
    input[type=range] {
        width: 100%;
    }
</style>

<!--<Title Value="@title" />-->
<h1>@title</h1>

@if (Bulb is not null)
{
    <YeelightPowerControls Bulb=@Bulb />
    <br>
    <div class="row">
        <div class="col">
            <label for="brightness_slider">Brightness: @Bulb.Brightness%</label>
            <div class="input-group mb-3">
                <input type="range" min="1" max="100" value="@Bulb.Brightness" @onchange="YeelightBrightness" id="brightness_slider" />
            </div>
            <div class="input-group mb-3">
                <input type="number" value="@Bulb.Brightness" @onchange="YeelightBrightness" />
                <span class="input-group-text">%</span>
            </div>
        </div>
        <div class="col">
            <label for="temperature_slider">Temperature: @Bulb.Temperature K</label>
            <div class="input-group mb-3">
                <input type="range" min="1700" max="6500" value="@Bulb.Temperature" @onchange="YeelightTemperature" id="temperature_slider" />
            </div>
            <div class="input-group mb-3">
                <input type="number" value="@Bulb.Temperature" @onchange="YeelightTemperature" />
                <span class="input-group-text">K</span>
            </div>
        </div>
        <div class="col">
            <label for="hue_slider">Hue: @Bulb.Hue°</label>
            <div class="input-group mb-3">
                <input type="range" min="0" max="359" value="@Bulb.Hue" @onchange="YeelightHue" id="hue_slider" />
            </div>
            <div class="input-group mb-3">
                <input type="number" value="@Bulb.Hue" @onchange="YeelightHue" />
                <span class="input-group-text">°</span>
            </div>
        </div>
        <div class="col">
            <label for="saturation_slider">Saturation: @Bulb.Saturation%</label>
            <div class="input-group mb-3">
                <input type="range" min="0" max="100" value="@Bulb.Saturation" @onchange="YeelightSaturation" id="saturation_slider" />
            </div>
            <div class="input-group mb-3">
                <input type="number" value="@Bulb.Saturation" @onchange="YeelightSaturation" />
                <span class="input-group-text">%</span>
            </div>
        </div>
    </div>

    @if (Bulb.Color is not null)
    {
        <ColorPicker RefreshEvent="yeelightService.GetStatus" Color="Bulb.Color" Mode="ColorMode.Yeelight" />
    }
}
else
{
    <p>Loading...</p>
}

<!--<ErrorDialog @ref="BadResponseDialog" />-->

@code {
    string title = "Yeelight control";

    private YeelightBulbModel Bulb { get; set; }

    //private ErrorDialog BadResponseDialog { get; set; }


    private async Task YeelightToggle()
    {
        try
        {
            Bulb = await yeelightService.Toggle();
        }
        catch
        {
            //BadResponseDialog.Show(exception.Message);
        }
    }

    private async Task YeelightBrightness(ChangeEventArgs e)
    {
        try
        {
            var brightness = Convert.ToInt32(e.Value);
            var response = await httpClient.GetAsync($"lights/brightness/{brightness}");
            if (response.StatusCode != HttpStatusCode.OK)
            {
                //await BadResponseDialog.Show(response);
            }
            else Bulb.Brightness = brightness;
        }
        catch
        {
            //BadResponseDialog.Show(exception.Message);
        }
    }

    private async Task YeelightTemperature(ChangeEventArgs e)
    {
        try
        {
            var temperature = Convert.ToInt32(e.Value);
            var response = await httpClient.GetAsync($"lights/temperature/{temperature}");
            if (response.StatusCode != HttpStatusCode.OK)
            {
                //await BadResponseDialog.Show(response);
            }
            else Bulb.Temperature = temperature;
        }
        catch
        {
            //BadResponseDialog.Show(exception.Message);
        }
    }

    private async Task YeelightHue(ChangeEventArgs e)
    {
        try
        {
            var hue = Convert.ToInt32(e.Value);
            var response = await httpClient.GetAsync($"lights/hs/{hue}/{Bulb.Saturation}");
            if (response.StatusCode != HttpStatusCode.OK)
            {
                //await BadResponseDialog.Show(response);
            }
            else Bulb.Hue = hue;
        }
        catch
        {
            //BadResponseDialog.Show(exception.Message);
        }
    }

    private async Task YeelightSaturation(ChangeEventArgs e)
    {
        try
        {
            var saturation = Convert.ToInt32(e.Value);
            var response = await httpClient.GetAsync($"lights/hs/{Bulb.Hue}/{saturation}");
            if (response.StatusCode != HttpStatusCode.OK)
            {
                //await BadResponseDialog.Show(response);
            }
            else Bulb.Saturation = saturation;
        }
        catch
        {
            //BadResponseDialog.Show(exception.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Bulb = await yeelightService.GetStatus();
        await base.OnInitializedAsync();
    }
}

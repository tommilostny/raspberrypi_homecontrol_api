@typeparam TLightModel

<CardComponent>
    @if (Light is not null)
    {
        <div class="row">
            <div class="col-7">
                <p>Power: <strong>@Light.Power</strong></p>
            </div>
            <div class="col">
                <FluentButton @onclick="Refresh" Appearance="Appearance.Outline" style="float:right">Refresh</FluentButton>
            </div>
        </div>

        <p>Color: (<strong>@Light.Color.Red, @Light.Color.Green, @Light.Color.Blue</strong>)</p>
        <div class="color-preview" style="background-color: rgb(@Light.Color.Red, @Light.Color.Green, @Light.Color.Blue);"></div>

        <FluentButton @onclick="Toggle" Appearance="Appearance.Accent">Toggle</FluentButton>
        <FluentButton @onclick="TurnOn">Turn on</FluentButton>
        <FluentButton @onclick="TurnOff">Turn off</FluentButton>

        <hr />

        <div class="row">
            <div class="col">
                <label for="brightness-slider" style="margin-left: 8px;">Brightness: <strong>@(@Light.Brightness)%</strong></label>
                <FluentSlider Min="0" Max="100" @bind-Value="@Light.Brightness">
                    <FluentSliderLabel Position="0">
                        0
                    </FluentSliderLabel>
                    <FluentSliderLabel Position="100">
                        100
                    </FluentSliderLabel>
                </FluentSlider>
            </div>
            <div class="col-3 slider-button">
                <FluentButton @onclick="SetBrightness">Set</FluentButton>
            </div>
        </div>
        
        @ChildContent
        <br />
    }
    else
    {
        <FluentProgressRing style="width: 62px;height: 62px; margin:0 auto"></FluentProgressRing>
    }
</CardComponent>
